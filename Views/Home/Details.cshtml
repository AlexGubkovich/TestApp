@model int
@{
    ViewData["Title"] = "Company Details";

    var companyInputs = new[] {
        new Input { LabelName = "Id", InputId = "companyId"},
        new Input { LabelName = "Name", InputId = "companyName"},
        new Input { LabelName = "Address", InputId = "companyAddress"},
        new Input { LabelName = "City", InputId = "companyCity"},
        new Input { LabelName = "State", InputId = "companyState"}
    };

    var employeeInputs = new[] {
        new Input { LabelName = "First Name", InputId = "employeeFirstName"},
        new Input { LabelName = "Last Name", InputId = "employeeLastName"},
        new Input { LabelName = "Title", InputId = "employeeTitle"},
        new Input { LabelName = "Birth Date", InputId = "employeeBirthDate", InputType = "date"},
        new Input { LabelName = "Position", InputId = "employeePosition"}
    };
}

<div class="row gx-5 mb-4">
    <div class="col-auto">
        <h5>Company Details</h5>
    </div>
    <div class="col-auto">
        <h5 id="companyNameHeader" class="lead"></h5>
    </div>
</div>

<div class="row p-2">
    <div class="col-auto border-top border-bottom mx-3 mb-4">
        <detail caption="Info" button-images=@(new List<string> { "/images/check.svg" })>
            @{
                RenderInputs(companyInputs);
            }
        </detail>
    </div>
    <div class="col-auto border-top border-bottom mx-3 mb-4">
        <detail caption="History" tag-id="historyDetail" content-attributes="table-responsive" button-images=@(new List<string> { "/images/refresh.svg" })>
            @{
                RenderTable(new[] { "Order Date", "Store City" }, "history");
            }
        </detail>
    </div>
    <div class="col-auto border-top border-bottom mx-3 mb-4">
        <detail caption="Notes" tag-id="notesDetail" content-attributes="table-responsive"
            button-images=@(new List<string> { "/images/add.svg", "/images/remove.svg", "/images/refresh.svg" })>
            @{
                RenderTable(new[] { "Invoice Number", "Employee" }, "notes");
            }
        </detail>
    </div>
    <div class="col-auto border-top border-bottom mx-3 mb-4">
        <div class="row">
            <div class="col-auto">
                <detail caption="Employees" tag-id="employeesDetail" content-attributes="table-responsive"
                    button-images=@(new List<string> { "/images/add.svg", "/images/edit.svg", "/images/refresh.svg" })>
                    @{
                        RenderTable(new [] { "First Name", "Last Name" }, "employees");
                    }
                </detail>
            </div>
            <div class="col-auto">
                <detail caption="" button-images=@(new List<string> { "/images/edit.svg", "/images/remove.svg" })>
                    @{
                        RenderInputs(employeeInputs);
                    }
                </detail>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/companyDetails.js"></script>
    <script>
        const getCompanyUrl = '@Url.Action("Get", "Companies", new { id = Model })'
        const getHistryUrl = '@Url.Action("GetHistory", "Companies", new { id = Model })'
        const getNotesUrl = '@Url.Action("GetNotes", "Companies", new { id = Model })'
        const getEmployeesUrl = '@Url.Action("GetEmployees", "Companies", new { id = Model })'

        $(document).ready(getRequest(getCompanyUrl, displayCompanyDetails))

        $('#notesDetail button:nth-child(3)').click(function () {
            getRequest(getNotesUrl, displayNotes)
        });

        $('#historyDetail button:nth-child(1)').click(function () {
            getRequest(getHistryUrl, displayHistory)
        });

        $('#employeesDetail button:nth-child(3)').click(function () {
            getRequest(getEmployeesUrl, displayEmployees)
        });
    </script>
}

@functions {
    private class Input
    {
        public string LabelName { get; set; } = string.Empty;
        public string InputId { get; set; } = string.Empty;
        public string InputType { get; set; } = "text";
    }

    private void RenderInputs(IEnumerable<Input> inputs)
    {
        foreach (var input in inputs)
        {
            <div class="row align-items-center mb-2">
                <div class="col-4">
                    <label for="@input.InputId" class="">@input.LabelName:</label>
                </div>
                <div class="col-8">
                    <input type="@input.InputType" class="form-control" id="@input.InputId">
                </div>
            </div>
        }
    }

    private void RenderTable(IEnumerable<string> tableHeaders, string tableId)
    {
        <table id="@tableId" class="table table-bordered">
            <thead>
                <tr>
                    @foreach (var header in tableHeaders)
                    {
                        <th scope="col">@header</th>
                    }
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    }
}